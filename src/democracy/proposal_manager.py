import_time  class_ProposalManager: """Manages_proposals_and_votes_within_the_system."""  def___init__(self): self.proposals_=_{}  def_create_proposal(self,_proposal_id,_description,_expiration_time): """Create_a_new_proposal.""" self.proposals[proposal_id]_=_{ "description":_description, "votes":_{"yes":_0,_"no":_0}, "expiration_time":_time.time()_+_expiration_time, "status":_"active", } print(f"Proposal_{proposal_id}_created:_{description}")  def_vote(self,_proposal_id,_vote_type): """Allow_agents_to_vote_on_a_proposal.""" if_proposal_id_not_in_self.proposals: print(f"Proposal_{proposal_id}_does_not_exist.") return proposal_=_self.proposals[proposal_id] if_time.time()_>_proposal["expiration_time"]: proposal["status"]_=_"expired" print(f"Proposal_{proposal_id}_has_expired.") return if_vote_type_not_in_proposal["votes"]: print("Invalid_vote_type._Use_'yes'_or_'no'.") return proposal["votes"][vote_type]_+=_1 print(f"Vote_'{vote_type}'_recorded_for_proposal_{proposal_id}.")  def_check_results(self,_proposal_id): """Check_the_results_of_a_proposal.""" if_proposal_id_not_in_self.proposals: print(f"Proposal_{proposal_id}_does_not_exist.") return proposal_=_self.proposals[proposal_id] return_{ "votes":_proposal["votes"], "status":_proposal["status"], }