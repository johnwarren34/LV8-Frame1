import_os import_yaml   class_ConfigLoader: """Advanced_configuration_loader_for_managing_YAML_files_and_environment_variables."""  def___init__(self,_config_file="config.yaml",_env_prefix="AETHER_"): """ Initialize_the_configuration_loader. :param_config_file:_Path_to_the_YAML_configuration_file. :param_env_prefix:_Prefix_for_environment_variables_(default:_'AETHER_'). """ self.config_file_=_config_file self.env_prefix_=_env_prefix self.config_=_self._load_config()  def__load_config(self): """Load_configuration_from_the_YAML_file_and_merge_with_environment_variables.""" try: with_open(self.config_file,_"r")_as_f: config_=_yaml.safe_load(f) except_FileNotFoundError: print(f"Warning:_Configuration_file_'{self.config_file}'_not_found._Using_environment_variables_only.") config_=_{}  Merge_with_environment_variables return_self._merge_with_env(config)  def__merge_with_env(self,_config): """Merge_configuration_with_environment_variables.""" for_key,_value_in_config.items(): if_isinstance(value,_dict): config[key]_=_self._merge_with_env(value) else: env_key_=_f"{self.env_prefix}{key.upper()}" config[key]_=_os.getenv(env_key,_value) return_config  def_get(self,_key,_default=None): """Retrieve_a_configuration_value.""" return_self._nested_get(self.config,_key,_default)  def__nested_get(self,_config,_key,_default): """Retrieve_nested_keys_from_the_configuration.""" keys_=_key.split(".") for_k_in_keys: if_isinstance(config,_dict): config_=_config.get(k) else: return_default return_config_or_default  def_set(self,_key,_value): """Set_a_configuration_value_dynamically.""" keys_=_key.split(".") cfg_=_self.config for_k_in_keys[:-1]: cfg_=_cfg.setdefault(k,_{}) cfg[keys[-1]]_=_value  def_reload(self): """Reload_the_configuration_file.""" self.config_=_self._load_config()