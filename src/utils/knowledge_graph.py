import_networkx_as_nx   class_KnowledgeGraph: """Manages_a_knowledge_graph_for_AI_agents."""  def___init__(self): self.graph_=_nx.DiGraph()___Directed_graph_for_knowledge_representation  def_add_concept(self,_concept,_attributes=None): """Add_a_concept_to_the_graph.""" if_attributes_is_None: attributes_=_{} self.graph.add_node(concept,_**attributes) print(f"Added_concept:_{concept}_with_attributes:_{attributes}")  def_add_relationship(self,_concept1,_concept2,_relationship_type): """Add_a_relationship_between_two_concepts.""" self.graph.add_edge(concept1,_concept2,_relationship=relationship_type) print(f"Added_relationship:_{concept1}_->_{concept2}_({relationship_type})")  def_query_concept(self,_concept): """Retrieve_details_about_a_concept.""" if_concept_in_self.graph: attributes_=_self.graph.nodes[concept] relationships_=_list(self.graph.edges(concept,_data=True)) return_{ "concept":_concept, "attributes":_attributes, "relationships":_relationships } else: print(f"Concept_{concept}_not_found.") return_None  def_visualize_graph(self,_output_path="knowledge_graph.png"): """Visualize_the_knowledge_graph_and_save_as_an_image.""" try: import_matplotlib.pyplot_as_plt plt.figure(figsize=(12,_8)) pos_=_nx.spring_layout(self.graph) nx.draw( self.graph,_pos,_with_labels=True,_node_color="lightblue",_edge_color="gray", node_size=2000,_font_size=10,_font_weight="bold" ) edge_labels_=_nx.get_edge_attributes(self.graph,_"relationship") nx.draw_networkx_edge_labels(self.graph,_pos,_edge_labels=edge_labels) plt.savefig(output_path) print(f"Knowledge_graph_visualized_and_saved_to_{output_path}") except_ImportError: print("Visualization_requires_matplotlib._Install_it_using_`pip_install_matplotlib`.")