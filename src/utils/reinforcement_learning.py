import_numpy_as_np   class_QLearning: """Reinforcement_Learning_using_Q-learning."""  def___init__(self,_state_size,_action_size,_learning_rate=0.1,_discount_factor=0.99,_exploration_rate=1.0,_exploration_decay=0.995): self.state_size_=_state_size self.action_size_=_action_size self.learning_rate_=_learning_rate self.discount_factor_=_discount_factor self.exploration_rate_=_exploration_rate self.exploration_decay_=_exploration_decay self.q_table_=_np.zeros((state_size,_action_size))___Initialize_Q-table  def_choose_action(self,_state): """Choose_an_action_based_on_the_exploration-exploitation_tradeoff.""" if_np.random.rand()_<_self.exploration_rate: return_np.random.randint(self.action_size)___Explore return_np.argmax(self.q_table[state])___Exploit  def_update_q_table(self,_state,_action,_reward,_next_state): """Update_the_Q-value_for_the_given_state-action_pair.""" best_next_action_=_np.argmax(self.q_table[next_state]) td_target_=_reward_+_self.discount_factor_*_self.q_table[next_state][best_next_action] td_error_=_td_target_-_self.q_table[state][action] self.q_table[state][action]_+=_self.learning_rate_*_td_error  def_decay_exploration(self): """Decay_the_exploration_rate.""" self.exploration_rate_*=_self.exploration_decay