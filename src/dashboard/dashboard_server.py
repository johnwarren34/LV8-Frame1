from_flask_import_Flask,_render_template,_jsonify from_src.agents.ai_agent_import_AIAgent import_threading import_random  app_=_Flask(__name__)  Simulated_agents_for_demonstration agents_=_[ AIAgent(agent_id=1,_role="worker",_provider="openai",_base_url="https://api.openai.com"), AIAgent(agent_id=2,_role="worker",_provider="openai",_base_url="https://api.openai.com"), AIAgent(agent_id=3,_role="coordinator",_provider="openai",_base_url="https://api.openai.com"), ]  Background_task_to_simulate_agent_activity def_simulate_agent_activity(): while_True: for_agent_in_agents: task_=_f"Task-{random.randint(1,_100)}" agent.add_task(priority=random.randint(1,_5),_task_description=task) agent.process_next_task()  Start_background_thread_for_simulation threading.Thread(target=simulate_agent_activity,_daemon=True).start()  @app.route("/") def_index(): return_render_template("dashboard.html")  @app.route("/api/metrics") def_get_metrics(): metrics_=_[] for_agent_in_agents: metrics.append({ "id":_agent.agent_id, "role":_agent.role, "knowledge_base_size":_len(agent.knowledge_base), "task_queue_size":_agent.task_queue.qsize(), }) return_jsonify(metrics)  if___name___==_"__main__": app.run(debug=True,_host="0.0.0.0",_port=5000)